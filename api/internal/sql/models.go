// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package sql

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type OrderStatus string

const (
	OrderStatusUNPAID        OrderStatus = "UNPAID"
	OrderStatusPARTIALLYPAID OrderStatus = "PARTIALLY_PAID"
	OrderStatusFULLYPAID     OrderStatus = "FULLY_PAID"
	OrderStatusSHIPPED       OrderStatus = "SHIPPED"
	OrderStatusDELIVERED     OrderStatus = "DELIVERED"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus `json:"order_status"`
	Valid       bool        `json:"valid"` // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type GroupOrder struct {
	ID                  string         `json:"id"`
	ProviderID          pgtype.Text    `json:"provider_id"`
	Name                string         `json:"name"`
	OrderNumber         string         `json:"order_number"`
	OrderDate           pgtype.Date    `json:"order_date"`
	DownpaymentDeadline pgtype.Date    `json:"downpayment_deadline"`
	PaymentDeadline     pgtype.Date    `json:"payment_deadline"`
	Status              OrderStatus    `json:"status"`
	TotalBalance        pgtype.Numeric `json:"total_balance"`
	RemainingBalance    pgtype.Numeric `json:"remaining_balance"`
}

type Provider struct {
	ID      string      `json:"id"`
	Name    string      `json:"name"`
	Website pgtype.Text `json:"website"`
}
