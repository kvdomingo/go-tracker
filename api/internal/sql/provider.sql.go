// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: provider.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProvider = `-- name: CreateProvider :one
INSERT INTO provider (name, website)
VALUES ($1, $2)
RETURNING id, name, website
`

type CreateProviderParams struct {
	Name    string      `json:"name"`
	Website pgtype.Text `json:"website"`
}

func (q *Queries) CreateProvider(ctx context.Context, arg CreateProviderParams) (Provider, error) {
	row := q.db.QueryRow(ctx, createProvider, arg.Name, arg.Website)
	var i Provider
	err := row.Scan(&i.ID, &i.Name, &i.Website)
	return i, err
}

const deleteProvider = `-- name: DeleteProvider :exec
DELETE
FROM provider
WHERE id = $1
`

func (q *Queries) DeleteProvider(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteProvider, id)
	return err
}

const getProvider = `-- name: GetProvider :one
SELECT id, name, website
FROM provider
WHERE id = $1
`

func (q *Queries) GetProvider(ctx context.Context, id string) (Provider, error) {
	row := q.db.QueryRow(ctx, getProvider, id)
	var i Provider
	err := row.Scan(&i.ID, &i.Name, &i.Website)
	return i, err
}

const listProviders = `-- name: ListProviders :many
SELECT id, name, website
FROM provider
`

func (q *Queries) ListProviders(ctx context.Context) ([]Provider, error) {
	rows, err := q.db.Query(ctx, listProviders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Provider
	for rows.Next() {
		var i Provider
		if err := rows.Scan(&i.ID, &i.Name, &i.Website); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProvider = `-- name: UpdateProvider :one
UPDATE provider
SET name    = $2,
    website = $3
WHERE id = $1
RETURNING id, name, website
`

type UpdateProviderParams struct {
	ID      string      `json:"id"`
	Name    string      `json:"name"`
	Website pgtype.Text `json:"website"`
}

func (q *Queries) UpdateProvider(ctx context.Context, arg UpdateProviderParams) (Provider, error) {
	row := q.db.QueryRow(ctx, updateProvider, arg.ID, arg.Name, arg.Website)
	var i Provider
	err := row.Scan(&i.ID, &i.Name, &i.Website)
	return i, err
}
