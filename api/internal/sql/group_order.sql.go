// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: group_order.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGroupOrder = `-- name: CreateGroupOrder :one
INSERT INTO group_order (provider_id, name, order_number, order_date, downpayment_deadline, payment_deadline, status,
                         total_balance, remaining_balance)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, provider_id, name, order_number, order_date, downpayment_deadline, payment_deadline, status, total_balance, remaining_balance
`

type CreateGroupOrderParams struct {
	ProviderID          pgtype.Text    `json:"provider_id"`
	Name                string         `json:"name"`
	OrderNumber         string         `json:"order_number"`
	OrderDate           pgtype.Date    `json:"order_date"`
	DownpaymentDeadline pgtype.Date    `json:"downpayment_deadline"`
	PaymentDeadline     pgtype.Date    `json:"payment_deadline"`
	Status              OrderStatus    `json:"status"`
	TotalBalance        pgtype.Numeric `json:"total_balance"`
	RemainingBalance    pgtype.Numeric `json:"remaining_balance"`
}

func (q *Queries) CreateGroupOrder(ctx context.Context, arg CreateGroupOrderParams) (GroupOrder, error) {
	row := q.db.QueryRow(ctx, createGroupOrder,
		arg.ProviderID,
		arg.Name,
		arg.OrderNumber,
		arg.OrderDate,
		arg.DownpaymentDeadline,
		arg.PaymentDeadline,
		arg.Status,
		arg.TotalBalance,
		arg.RemainingBalance,
	)
	var i GroupOrder
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.Name,
		&i.OrderNumber,
		&i.OrderDate,
		&i.DownpaymentDeadline,
		&i.PaymentDeadline,
		&i.Status,
		&i.TotalBalance,
		&i.RemainingBalance,
	)
	return i, err
}

const deleteGroupOrder = `-- name: DeleteGroupOrder :exec
DELETE
FROM group_order
WHERE id = $1
`

func (q *Queries) DeleteGroupOrder(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteGroupOrder, id)
	return err
}

const getGroupOrder = `-- name: GetGroupOrder :one
SELECT id, provider_id, name, order_number, order_date, downpayment_deadline, payment_deadline, status, total_balance, remaining_balance
FROM group_order
WHERE id = $1
`

func (q *Queries) GetGroupOrder(ctx context.Context, id string) (GroupOrder, error) {
	row := q.db.QueryRow(ctx, getGroupOrder, id)
	var i GroupOrder
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.Name,
		&i.OrderNumber,
		&i.OrderDate,
		&i.DownpaymentDeadline,
		&i.PaymentDeadline,
		&i.Status,
		&i.TotalBalance,
		&i.RemainingBalance,
	)
	return i, err
}

const listGroupOrders = `-- name: ListGroupOrders :many
SELECT id, provider_id, name, order_number, order_date, downpayment_deadline, payment_deadline, status, total_balance, remaining_balance
FROM group_order
`

func (q *Queries) ListGroupOrders(ctx context.Context) ([]GroupOrder, error) {
	rows, err := q.db.Query(ctx, listGroupOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupOrder
	for rows.Next() {
		var i GroupOrder
		if err := rows.Scan(
			&i.ID,
			&i.ProviderID,
			&i.Name,
			&i.OrderNumber,
			&i.OrderDate,
			&i.DownpaymentDeadline,
			&i.PaymentDeadline,
			&i.Status,
			&i.TotalBalance,
			&i.RemainingBalance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroupOrder = `-- name: UpdateGroupOrder :one
UPDATE group_order
SET provider_id          = $2,
    name                 = $3,
    order_number         = $4,
    order_date           = $5,
    downpayment_deadline = $6,
    payment_deadline     = $7,
    status               = $8,
    total_balance        = $9,
    remaining_balance    = $10
WHERE id = $1
RETURNING id, provider_id, name, order_number, order_date, downpayment_deadline, payment_deadline, status, total_balance, remaining_balance
`

type UpdateGroupOrderParams struct {
	ID                  string         `json:"id"`
	ProviderID          pgtype.Text    `json:"provider_id"`
	Name                string         `json:"name"`
	OrderNumber         string         `json:"order_number"`
	OrderDate           pgtype.Date    `json:"order_date"`
	DownpaymentDeadline pgtype.Date    `json:"downpayment_deadline"`
	PaymentDeadline     pgtype.Date    `json:"payment_deadline"`
	Status              OrderStatus    `json:"status"`
	TotalBalance        pgtype.Numeric `json:"total_balance"`
	RemainingBalance    pgtype.Numeric `json:"remaining_balance"`
}

func (q *Queries) UpdateGroupOrder(ctx context.Context, arg UpdateGroupOrderParams) (GroupOrder, error) {
	row := q.db.QueryRow(ctx, updateGroupOrder,
		arg.ID,
		arg.ProviderID,
		arg.Name,
		arg.OrderNumber,
		arg.OrderDate,
		arg.DownpaymentDeadline,
		arg.PaymentDeadline,
		arg.Status,
		arg.TotalBalance,
		arg.RemainingBalance,
	)
	var i GroupOrder
	err := row.Scan(
		&i.ID,
		&i.ProviderID,
		&i.Name,
		&i.OrderNumber,
		&i.OrderDate,
		&i.DownpaymentDeadline,
		&i.PaymentDeadline,
		&i.Status,
		&i.TotalBalance,
		&i.RemainingBalance,
	)
	return i, err
}
